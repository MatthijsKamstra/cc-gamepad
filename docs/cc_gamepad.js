// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var CCGamepad = function() {
	this.map = new haxe_ds_StringMap();
	this.controllers = [];
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Dom ready :: build: " + "2020-09-16 09:24:09");
		_gthis.initSetup();
		_gthis.init();
	});
};
CCGamepad.main = function() {
	var app = new CCGamepad();
};
CCGamepad.prototype = {
	initSetup: function() {
		var div = window.document.createElement("div");
		div.id = "start-screen";
		div.innerHTML = "<h2>No gamepad detected</h2><p>If you have one, make sure it's plugged in / paired, and press buttons to wake it up.</p>";
		window.document.body.appendChild(div);
	}
	,init: function() {
		window.addEventListener("gamepadconnected",$bind(this,this.onGamepadConnectedHandler));
		window.addEventListener("gamepaddisconnected",$bind(this,this.onGamepadDisconnectedHandler));
		window.addEventListener("gamepadbuttondown",$bind(this,this.onGamepadButtonDownHandler));
		window.addEventListener("gamepadbuttonup",$bind(this,this.onGamepadButtonUpHandler));
		window.addEventListener("gamepadaxismove",$bind(this,this.onGamepadAxisMoveHandler));
	}
	,onGamepadConnectedHandler: function(e) {
		$global.console.log("Gamepad connected",e.gamepad);
		var gamePads = $global.navigator.getGamepads();
		$global.console.log(gamePads);
		var gamepad = $global.navigator.getGamepads()[0];
		$global.console.log(gamepad);
	}
	,onGamepadDisconnectedHandler: function(e) {
		$global.console.log("Gamepad disconnected",e.gamepad);
	}
	,onGamepadButtonDownHandler: function(e) {
		$global.console.log("Gamepad button down",e.button,e.gamepad);
	}
	,onGamepadButtonUpHandler: function(e) {
		$global.console.log("Gamepad button up",e.button,e.gamepad);
	}
	,onGamepadAxisMoveHandler: function(e) {
		$global.console.log("Gamepad axis move",e.button,e.gamepad);
	}
	,applyDeadzone: function(number,threshold) {
		var percentage = (Math.abs(number) - threshold) / (1 - threshold);
		if(percentage < 0) {
			percentage = 0;
		}
		return percentage * (number > 0 ? 1 : -1);
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var model_constants_App = function() { };
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
model_constants_App.NAME = "[cc-gamepad]";
CCGamepad.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_gamepad.js.map