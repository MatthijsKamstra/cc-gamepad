// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() {
	this.map = new haxe_ds_StringMap();
	this.controllers = [];
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		console.log("src/Main.hx:26:","START :: main");
		_gthis.init();
	});
};
Main.__name__ = true;
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	init: function() {
		window.addEventListener("gamepadconnected",$bind(this,this.connecthandler));
		window.addEventListener("gamepaddisconnected",$bind(this,this.disconnecthandler));
	}
	,disconnecthandler: function(e) {
		this.removegamepad(e.gamepad);
	}
	,connecthandler: function(e) {
		this.addgamepad(e.gamepad);
	}
	,addgamepad: function(gamepad) {
		this.controllers[gamepad.index] = gamepad;
		var btnMap = new haxe_ds_IntMap();
		btnMap.h[0] = "X";
		btnMap.h[1] = "A";
		btnMap.h[2] = "B";
		btnMap.h[3] = "Y";
		btnMap.h[4] = "Left Bottom";
		btnMap.h[5] = "Right Bottom";
		btnMap.h[6] = "";
		btnMap.h[7] = "";
		btnMap.h[8] = "Select";
		btnMap.h[9] = "Start";
		var _GamePadObject = { _id : gamepad.id, alias : "fake super nintendo controller (snes)", gamepad : gamepad, buttonMap : btnMap};
		this.map.h[gamepad.id] = _GamePadObject;
		var tmp = this.map.h[gamepad.id];
		$global.console.log(tmp);
		$global.console.log(gamepad);
		$global.console.log("\"" + gamepad.id + "\"");
		$global.console.log(gamepad.index);
		$global.console.log(gamepad.buttons);
		$global.console.log(gamepad.axes);
		var d = window.document.createElement("div");
		d.setAttribute("id","controller" + gamepad.index);
		var t = window.document.createElement("h1");
		t.appendChild(window.document.createTextNode("gamepad: " + gamepad.id));
		d.appendChild(t);
		var t = window.document.createElement("div");
		t.id = "name-button";
		d.appendChild(t);
		var b = window.document.createElement("div");
		b.className = "buttons";
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var e = window.document.createElement("span");
			e.className = "button";
			e.innerHTML = i == null ? "null" : "" + i;
			b.appendChild(e);
		}
		d.appendChild(b);
		var a = window.document.createElement("div");
		a.className = "axes";
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var p = window.document.createElement("progress");
			p.className = "axis";
			p.setAttribute("max","2");
			p.setAttribute("value","1");
			p.innerHTML = i == null ? "null" : "" + i;
			a.appendChild(p);
		}
		d.appendChild(a);
		var start = window.document.getElementById("start");
		if(start != null) {
			start.style.display = "none";
		}
		window.document.body.appendChild(d);
		window.requestAnimationFrame($bind(this,this.updateStatus));
	}
	,removegamepad: function(gamepad) {
		var d = window.document.getElementById("controller" + gamepad.index);
		window.document.body.removeChild(d);
		HxOverrides.remove(this.controllers,this.controllers[gamepad.index]);
	}
	,updateStatus: function(e) {
		var t = window.document.getElementById("name-button");
		var _g = 0;
		var _g1 = this.controllers.length;
		while(_g < _g1) {
			var j = _g++;
			var controller = this.controllers[j];
			var _gamePadObject = this.map.h[controller.id];
			var d = window.document.getElementById("controller" + j);
			var buttons = d.getElementsByClassName("button");
			var _g2 = 0;
			var _g3 = controller.buttons.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var b = buttons[i];
				var gamebadButton = controller.buttons[i];
				var pressed = gamebadButton.pressed;
				var val = gamebadButton.value;
				var pct = Math.round(val * 100) + "%";
				b.style.backgroundSize = pct + " " + pct;
				if(pressed) {
					b.className = "button pressed";
					var temp = _gamePadObject.buttonMap.h[i];
					t.innerText = "button name: " + temp;
				} else {
					b.className = "button";
				}
			}
			var axes = d.getElementsByClassName("axis");
			var _g4 = 0;
			var _g5 = controller.axes.length;
			while(_g4 < _g5) {
				var i1 = _g4++;
				var a = axes[i1];
				a.innerHTML = i1 + ": " + controller.axes[i1];
				a.setAttribute("value",Std.string(controller.axes[i1] + 1));
			}
		}
		window.requestAnimationFrame($bind(this,this.updateStatus));
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_gamepad.js.map