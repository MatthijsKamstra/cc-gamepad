// Generated by Haxe 4.1.4
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var CCGamepad = function() {
	this.previousButtonID = null;
	this._options = { };
	this.axisMap = new haxe_ds_IntMap();
	this.btnMap = new haxe_ds_IntMap();
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Dom ready :: build: " + "2020-09-18 23:35:35");
		_gthis.init();
	});
};
CCGamepad.__name__ = true;
CCGamepad.main = function() {
	var app = new CCGamepad();
};
CCGamepad.prototype = {
	setup: function() {
		this.init();
	}
	,onButton: function(func,arr) {
		var action = new Action(func,arr);
		this._options.onButton = action;
	}
	,onButtonOnce: function(id,func,arr) {
		var action = new Action(func,arr,true);
		action.btnid(id);
		this._options.onButton = action;
	}
	,onAxis: function(func,arr) {
		this._options.onAxis = func;
		this._options.onAxisParams = arr;
	}
	,onSelect: function(func,arr) {
		var action = new Action(func,arr);
		this._options.onSelect = action;
	}
	,onSelectOnce: function(func,arr) {
		var action = new Action(func,arr,true);
		this._options.onSelect = action;
	}
	,onLeftBottomOnce: function(func,arr) {
		var action = new Action(func,arr,true);
		this._options.onLeftBottom = action;
	}
	,onRightBottomOnce: function(func,arr) {
		var action = new Action(func,arr,true);
		this._options.onRightBottom = action;
	}
	,onStart: function(func,arr) {
		var action = new Action(func,arr);
		this._options.onStart = action;
	}
	,onStartOnce: function(func,arr) {
		var action = new Action(func,arr,true);
		this._options.onStart = action;
	}
	,init: function() {
		this.setupWarning();
		this.setupListeners();
	}
	,setupWarning: function() {
		var containerDiv = window.document.createElement("div");
		containerDiv.id = "gamepad-warning";
		containerDiv.setAttribute("style","background-color: rgba(0, 0, 0, 0.3);width: 100vw;height: 100vh;display: flex;justify-content: center;align-items: center;overflow-x: hidden;overflow-y: auto;z-index: 99999999999;position: fixed;top: 0;left: 0;");
		var div = window.document.createElement("div");
		div.className = "wrapper";
		div.setAttribute("style","background-color: white;width: 300px;text-align: center;border: 1px solid rgba(0, 0, 0, .2);border-radius: .3rem;padding: 1rem 1rem;");
		div.innerHTML = "<i class=\"fa fa-gamepad fa-5x\"></i><h2>No gamepad detected</h2><p>If you have one, make sure it's plugged in / paired, and press buttons to wake it up.</p>";
		containerDiv.appendChild(div);
		window.document.body.appendChild(containerDiv);
	}
	,setupListeners: function() {
		window.addEventListener("gamepadconnected",$bind(this,this.onGamepadConnectedHandler));
		window.addEventListener("gamepaddisconnected",$bind(this,this.onGamepadDisconnectedHandler));
		window.addEventListener("gamepadbuttondown",$bind(this,this.onGamepadButtonDownHandler));
		window.addEventListener("gamepadbuttonup",$bind(this,this.onGamepadButtonUpHandler));
		window.addEventListener("gamepadaxismove",$bind(this,this.onGamepadAxisMoveHandler));
	}
	,setupInterface: function() {
		var gamepad = $global.navigator.getGamepads()[0];
		var d = window.document.createElement("div");
		d.className = "container";
		d.setAttribute("id","controller" + gamepad.index);
		var t = window.document.createElement("h1");
		t.appendChild(window.document.createTextNode("gamepad: " + gamepad.id));
		d.appendChild(t);
		var t = window.document.createElement("div");
		t.id = "name-button";
		d.appendChild(t);
		this.btnNameField = t;
		var b = window.document.createElement("div");
		b.className = "buttons";
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var e = window.document.createElement("span");
			e.className = "button";
			e.innerHTML = i == null ? "null" : "" + i;
			b.appendChild(e);
			this.btnMap.h[i] = e;
		}
		d.appendChild(b);
		var a = window.document.createElement("div");
		a.className = "axes";
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var p = window.document.createElement("progress");
			p.className = "axis";
			p.setAttribute("max","2");
			p.setAttribute("value","1");
			p.innerHTML = i == null ? "null" : "" + i;
			a.appendChild(p);
			this.axisMap.h[i] = p;
		}
		d.appendChild(a);
		var pre = window.document.createElement("div");
		pre.innerText = "- index: " + gamepad.index + "\n- id: \"" + gamepad.id + "\"\n- timestamp: " + gamepad.timestamp + "\n- mapping: " + gamepad.mapping + "\n- connected: " + (gamepad.connected == null ? "null" : "" + gamepad.connected) + "\n- buttons: " + gamepad.buttons.length + "\n- axes: " + gamepad.axes.length;
		d.appendChild(pre);
		var warningDiv = window.document.getElementById("gamepad-warning");
		if(warningDiv != null) {
			warningDiv.style.display = "none";
		}
		window.document.body.appendChild(d);
		$global.console.warn("TODO: remove this element better");
		d.style.display = "none";
		window.document.body.focus();
	}
	,onGamepadConnectedHandler: function(e) {
		$global.console.log("Gamepad connected",e.gamepad);
		this.setupInterface();
		this.gameLoop();
	}
	,onGamepadDisconnectedHandler: function(e) {
		$global.console.log("Gamepad disconnected",e.gamepad);
		window.cancelAnimationFrame(this.start);
	}
	,onGamepadButtonDownHandler: function(e) {
		$global.console.log("Gamepad button down",e.button,e.gamepad);
	}
	,onGamepadButtonUpHandler: function(e) {
		$global.console.log("Gamepad button up",e.button,e.gamepad);
	}
	,onGamepadAxisMoveHandler: function(e) {
		$global.console.log("Gamepad axis move",e.button,e.gamepad);
	}
	,gameLoop: function(value) {
		var gamepad = $global.navigator.getGamepads()[0];
		var el = this.btnMap.iterator();
		while(el.hasNext()) {
			var el1 = el.next();
			el1.classList.remove("pressed");
		}
		if(this.previousButtonID != null && !gamepad.buttons[this.previousButtonID].pressed) {
			this.previousButtonID = null;
		}
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var currentButton = gamepad.buttons[i];
			if(currentButton.pressed) {
				var el = this.btnMap.h[i];
				el.classList.add("pressed");
				this.btnNameField.innerText = CCGamepad.BUTTON_MAP.h[i];
				switch(i) {
				case CCGamepad.BUTTON_LEFT_BOTTOM:
					if(this._options.onLeftBottom != null) {
						var _func = this._options.onLeftBottom.func;
						var _arr = this._options.onLeftBottom.arr != null ? this._options.onLeftBottom.arr : [gamepad.timestamp];
						if(this._options.onLeftBottom.isOnce == true && this.previousButtonID != i) {
							_func.apply(_func,_arr);
						} else if(this._options.onLeftBottom.isOnce == false) {
							_func.apply(_func,_arr);
						}
					}
					break;
				case CCGamepad.BUTTON_RIGHT_BOTTOM:
					if(this._options.onRightBottom != null) {
						var _func1 = this._options.onRightBottom.func;
						var _arr1 = this._options.onRightBottom.arr != null ? this._options.onRightBottom.arr : [gamepad.timestamp];
						if(this._options.onRightBottom.isOnce == true && this.previousButtonID != i) {
							_func1.apply(_func1,_arr1);
						} else if(this._options.onRightBottom.isOnce == false) {
							_func1.apply(_func1,_arr1);
						}
					}
					break;
				case CCGamepad.BUTTON_SELECT:
					if(this._options.onSelect != null) {
						var _func2 = this._options.onSelect.func;
						var _arr2 = this._options.onSelect.arr != null ? this._options.onSelect.arr : [gamepad.timestamp];
						if(this._options.onSelect.isOnce == true && this.previousButtonID != i) {
							_func2.apply(_func2,_arr2);
						} else if(this._options.onSelect.isOnce == false) {
							_func2.apply(_func2,_arr2);
						}
					}
					break;
				case CCGamepad.BUTTON_START:
					if(this._options.onStart != null) {
						var _func3 = this._options.onStart.func;
						var _arr3 = this._options.onStart.arr != null ? this._options.onStart.arr : [gamepad.timestamp];
						if(this._options.onStart.isOnce == true && this.previousButtonID != i) {
							_func3.apply(_func3,_arr3);
						} else if(this._options.onStart.isOnce == false) {
							_func3.apply(_func3,_arr3);
						}
					}
					break;
				default:
					if(this._options.onButton != null) {
						var _func4 = this._options.onButton.func;
						var _arr4 = this._options.onButton.arr != null ? this._options.onButton.arr : [CCGamepad.BUTTON_MAP.h[i]];
						if(this.previousButtonID != i && this._options.onButton.id == i) {
							_func4.apply(_func4,_arr4);
						}
					}
				}
				this.previousButtonID = i;
			}
		}
		var axes = window.document.getElementsByClassName("axis");
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var a = axes[i];
			a.innerHTML = i + ": " + gamepad.axes[i];
			a.setAttribute("value",Std.string(gamepad.axes[i] + 1));
			var joystickX = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 2],0.25);
			var joystickY = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 1],0.25);
			var joystickStr = "{x:" + joystickX + ",y:" + joystickY + "}";
			var joystickObj = { x : joystickX, y : joystickY, desc : CCGamepad.AXIS_MAP.h[joystickStr]};
			if(!(joystickX == 0 && joystickY == 0)) {
				this.btnNameField.innerText = CCGamepad.AXIS_MAP.h[joystickStr];
			}
			if(this._options.onAxis != null) {
				if(joystickX != 0 || joystickY != 0) {
					var _func = this._options.onAxis;
					var _arr = this._options.onAxisParams != null ? this._options.onAxisParams : [joystickObj];
					_func.apply(_func,_arr);
				}
			}
		}
		this.start = window.requestAnimationFrame($bind(this,this.gameLoop));
	}
	,applyDeadzone: function(number,threshold) {
		var percentage = (Math.abs(number) - threshold) / (1 - threshold);
		if(percentage < 0) {
			percentage = 0;
		}
		return percentage * (number > 0 ? 1 : -1);
	}
	,__class__: CCGamepad
};
var Action = function(func,arr,isOnce) {
	if(isOnce == null) {
		isOnce = false;
	}
	this.isOnce = false;
	this.func = func;
	this.arr = arr;
	this.isOnce = isOnce;
};
Action.__name__ = true;
Action.prototype = {
	btnid: function(id) {
		this.id = id;
	}
	,__class__: Action
};
var Main = function() {
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Setup :: build: " + "2020-09-18 23:35:35");
		_gthis.init();
	});
};
Main.__name__ = true;
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	init: function() {
		var gamePad = new SNES();
		gamePad.setup();
		gamePad.onSelectOnce($bind(this,this.onSelectHandler));
		gamePad.onStartOnce($bind(this,this.onStartHandler));
		gamePad.onLeftBottomOnce($bind(this,this.onLeftBottomHandler));
		gamePad.onRightBottomOnce($bind(this,this.onRightBottomHandler));
		gamePad.onButton($bind(this,this.onButton));
		gamePad.onButtonOnce(CCGamepad.BUTTON_B,$bind(this,this.onButtonOnce));
		gamePad.onAxis($bind(this,this.onAxis));
	}
	,onSelectHandler: function(e) {
		$global.console.log("onSelectHandler: ",e);
	}
	,onStartHandler: function(e) {
		$global.console.log("onStartHandler: ",e);
	}
	,onButtonOnce: function(e) {
		$global.console.log(">> onButtonOnce: ",e);
	}
	,onLeftBottomHandler: function(e) {
		$global.console.log("onLeftBottomHandler: ",e);
	}
	,onRightBottomHandler: function(e) {
		$global.console.log("onRightBottomHandler: ",e);
	}
	,onAxis: function(e) {
		var _g = e.desc;
		if(_g == null) {
			console.log("src/Main.hx:71:","case '" + Std.string(e) + "': trace ('" + Std.string(e) + "');");
		} else {
			switch(_g) {
			case CCGamepad.AXIS_CENTER_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_DOWN_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_DOWN_LEFT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_DOWN_RIGHT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_LEFT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_RIGHT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_UP_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_UP_LEFT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			case CCGamepad.AXIS_UP_RIGHT_DISC:
				$global.console.log("--> " + e.desc);
				break;
			default:
				console.log("src/Main.hx:71:","case '" + Std.string(e) + "': trace ('" + Std.string(e) + "');");
			}
		}
	}
	,onButton: function(disc) {
		switch(disc) {
		case CCGamepad.BUTTON_A_DISC:
			$global.console.log("--> " + disc);
			break;
		case CCGamepad.BUTTON_B_DISC:
			$global.console.log("--> " + disc);
			break;
		case CCGamepad.BUTTON_X_DISC:
			$global.console.log("--> " + disc);
			break;
		case CCGamepad.BUTTON_Y_DISC:
			$global.console.log("--> " + disc);
			break;
		default:
			console.log("src/Main.hx:87:","case '" + disc + "': trace ('" + disc + "');");
		}
	}
	,__class__: Main
};
Math.__name__ = true;
var SNES = function() {
	$global.console.log("" + model_constants_App.NAME + " SNES :: build: " + "2020-09-18 23:35:35");
	CCGamepad.call(this);
};
SNES.__name__ = true;
SNES.__super__ = CCGamepad;
SNES.prototype = $extend(CCGamepad.prototype,{
	__class__: SNES
});
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var model_constants_App = function() { };
model_constants_App.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
CCGamepad.AXIS_RIGHT = "{x:1,y:0}";
CCGamepad.AXIS_LEFT = "{x:-1,y:0}";
CCGamepad.AXIS_DOWN = "{x:0,y:1}";
CCGamepad.AXIS_UP = "{x:0,y:-1}";
CCGamepad.AXIS_DOWN_RIGHT = "{x:1,y:1}";
CCGamepad.AXIS_DOWN_LEFT = "{x:-1,y:1}";
CCGamepad.AXIS_UP_RIGHT = "{x:1,y:-1}";
CCGamepad.AXIS_UP_LEFT = "{x:-1,y:-1}";
CCGamepad.AXIS_CENTER = "{x:0,y:0}";
CCGamepad.AXIS_RIGHT_DISC = "→";
CCGamepad.AXIS_LEFT_DISC = "←";
CCGamepad.AXIS_DOWN_DISC = "↓";
CCGamepad.AXIS_UP_DISC = "↑";
CCGamepad.AXIS_DOWN_RIGHT_DISC = "↘";
CCGamepad.AXIS_DOWN_LEFT_DISC = "↙";
CCGamepad.AXIS_UP_RIGHT_DISC = "↗";
CCGamepad.AXIS_UP_LEFT_DISC = "↖";
CCGamepad.AXIS_CENTER_DISC = "×";
CCGamepad.AXIS_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h[CCGamepad.AXIS_RIGHT] = CCGamepad.AXIS_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_LEFT] = CCGamepad.AXIS_LEFT_DISC;
	_g.h[CCGamepad.AXIS_DOWN] = CCGamepad.AXIS_DOWN_DISC;
	_g.h[CCGamepad.AXIS_UP] = CCGamepad.AXIS_UP_DISC;
	_g.h[CCGamepad.AXIS_DOWN_RIGHT] = CCGamepad.AXIS_DOWN_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_DOWN_LEFT] = CCGamepad.AXIS_DOWN_LEFT_DISC;
	_g.h[CCGamepad.AXIS_UP_RIGHT] = CCGamepad.AXIS_UP_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_UP_LEFT] = CCGamepad.AXIS_UP_LEFT_DISC;
	_g.h[CCGamepad.AXIS_CENTER] = CCGamepad.AXIS_CENTER_DISC;
	$r = _g;
	return $r;
}(this));
CCGamepad.BUTTON_X = 0;
CCGamepad.BUTTON_A = 1;
CCGamepad.BUTTON_B = 2;
CCGamepad.BUTTON_Y = 3;
CCGamepad.BUTTON_LEFT_BOTTOM = 4;
CCGamepad.BUTTON_RIGHT_BOTTOM = 5;
CCGamepad.BUTTON_SELECT = 8;
CCGamepad.BUTTON_START = 9;
CCGamepad.BUTTON_X_DISC = "X";
CCGamepad.BUTTON_A_DISC = "A";
CCGamepad.BUTTON_B_DISC = "B";
CCGamepad.BUTTON_Y_DISC = "Y";
CCGamepad.BUTTON_LEFT_BOTTOM_DISC = "Left Bottom";
CCGamepad.BUTTON_RIGHT_BOTTOM_DISC = "Right Bottom";
CCGamepad.BUTTON_SELECT_DISC = "Select";
CCGamepad.BUTTON_START_DISC = "Start";
CCGamepad.BUTTON_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[CCGamepad.BUTTON_X] = CCGamepad.BUTTON_X_DISC;
	_g.h[CCGamepad.BUTTON_A] = CCGamepad.BUTTON_A_DISC;
	_g.h[CCGamepad.BUTTON_B] = CCGamepad.BUTTON_B_DISC;
	_g.h[CCGamepad.BUTTON_Y] = CCGamepad.BUTTON_Y_DISC;
	_g.h[CCGamepad.BUTTON_LEFT_BOTTOM] = CCGamepad.BUTTON_LEFT_BOTTOM_DISC;
	_g.h[CCGamepad.BUTTON_RIGHT_BOTTOM] = CCGamepad.BUTTON_RIGHT_BOTTOM_DISC;
	_g.h[CCGamepad.BUTTON_SELECT] = CCGamepad.BUTTON_SELECT_DISC;
	_g.h[CCGamepad.BUTTON_START] = CCGamepad.BUTTON_START_DISC;
	$r = _g;
	return $r;
}(this));
SNES.BUTTON_X = 0;
SNES.BUTTON_A = 1;
SNES.BUTTON_B = 2;
SNES.BUTTON_Y = 3;
SNES.BUTTON_LEFT_BOTTOM = 4;
SNES.BUTTON_RIGHT_BOTTOM = 5;
SNES.BUTTON_SELECT = 8;
SNES.BUTTON_START = 9;
model_constants_App.NAME = "[cc-gamepad]";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_gamepad.js.map