// Generated by Haxe 4.1.4
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var CCGamepad = function() {
	this.previousButtonID = null;
	this.axisMap = new haxe_ds_IntMap();
	this.btnMap = new haxe_ds_IntMap();
	this._options = { };
	this.map = new haxe_ds_IntMap();
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Dom ready :: build: " + "2020-09-17 10:40:01");
		_gthis.init();
	});
};
CCGamepad.__name__ = true;
CCGamepad.main = function() {
	var app = new CCGamepad();
};
CCGamepad.prototype = {
	setup: function() {
		this.init();
	}
	,onUpdate: function(func,arr) {
		this._options.onUpdate = func;
		this._options.onUpdateParams = arr;
	}
	,onSelect: function(func,arr) {
		this._options.onSelect = func;
		this._options.onSelectParams = arr;
	}
	,onStart: function(func,arr) {
		this._options.onStart = func;
		this._options.onStartParams = arr;
		this._options.onStartOnce = false;
	}
	,onStartOnce: function(func,arr) {
		this._options.onStart = func;
		this._options.onStartParams = arr;
		this._options.onStartOnce = true;
	}
	,init: function() {
		this.setupStart();
		this.setupListeners();
	}
	,setupStart: function() {
		var div = window.document.createElement("div");
		div.id = "start-screen";
		div.className = "container";
		div.innerHTML = "<h2>No gamepad detected</h2><p>If you have one, make sure it's plugged in / paired, and press buttons to wake it up.</p>";
		window.document.body.appendChild(div);
	}
	,setupListeners: function() {
		window.addEventListener("gamepadconnected",$bind(this,this.onGamepadConnectedHandler));
		window.addEventListener("gamepaddisconnected",$bind(this,this.onGamepadDisconnectedHandler));
		window.addEventListener("gamepadbuttondown",$bind(this,this.onGamepadButtonDownHandler));
		window.addEventListener("gamepadbuttonup",$bind(this,this.onGamepadButtonUpHandler));
		window.addEventListener("gamepadaxismove",$bind(this,this.onGamepadAxisMoveHandler));
	}
	,setupControllerValues: function() {
		var gamepad = $global.navigator.getGamepads()[0];
		var btnMap = new haxe_ds_IntMap();
		btnMap.h[0] = "X";
		btnMap.h[1] = "A";
		btnMap.h[2] = "B";
		btnMap.h[3] = "Y";
		btnMap.h[4] = "Left Bottom";
		btnMap.h[5] = "Right Bottom";
		btnMap.h[6] = "";
		btnMap.h[7] = "";
		btnMap.h[8] = "Select";
		btnMap.h[9] = "Start";
		var _GamePadObject = { _id : gamepad.id, alias : "fake super nintendo controller (snes)", gamepad : gamepad, buttonMap : btnMap};
		this.map.h[0] = _GamePadObject;
	}
	,setupInterface: function() {
		var gamepad = $global.navigator.getGamepads()[0];
		var btnArray = gamepad.buttons;
		var axixArray = gamepad.axes;
		var d = window.document.createElement("div");
		d.className = "container";
		d.setAttribute("id","controller" + gamepad.index);
		var t = window.document.createElement("h1");
		t.appendChild(window.document.createTextNode("gamepad: " + gamepad.id));
		d.appendChild(t);
		var t = window.document.createElement("div");
		t.id = "name-button";
		d.appendChild(t);
		this.btnNameField = t;
		var b = window.document.createElement("div");
		b.className = "buttons";
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var e = window.document.createElement("span");
			e.className = "button";
			e.innerHTML = i == null ? "null" : "" + i;
			b.appendChild(e);
			this.btnMap.h[i] = e;
		}
		d.appendChild(b);
		var a = window.document.createElement("div");
		a.className = "axes";
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var p = window.document.createElement("progress");
			p.className = "axis";
			p.setAttribute("max","2");
			p.setAttribute("value","1");
			p.innerHTML = i == null ? "null" : "" + i;
			a.appendChild(p);
			this.axisMap.h[i] = p;
		}
		d.appendChild(a);
		var pre = window.document.createElement("pre");
		pre.innerText = "- id: " + gamepad.id + " \n- connected: " + (gamepad.connected == null ? "null" : "" + gamepad.connected) + "\n- index: " + gamepad.index;
		d.appendChild(pre);
		var start = window.document.getElementById("start-screen");
		if(start != null) {
			start.style.display = "none";
		}
		window.document.body.appendChild(d);
	}
	,onGamepadConnectedHandler: function(e) {
		$global.console.log("Gamepad connected",e.gamepad);
		this.setupControllerValues();
		this.setupInterface();
		this.gameLoop();
	}
	,onGamepadDisconnectedHandler: function(e) {
		$global.console.log("Gamepad disconnected",e.gamepad);
		window.cancelAnimationFrame(this.start);
	}
	,onGamepadButtonDownHandler: function(e) {
		$global.console.log("Gamepad button down",e.button,e.gamepad);
	}
	,onGamepadButtonUpHandler: function(e) {
		$global.console.log("Gamepad button up",e.button,e.gamepad);
	}
	,onGamepadAxisMoveHandler: function(e) {
		$global.console.log("Gamepad axis move",e.button,e.gamepad);
	}
	,gameLoop: function(value) {
		var gamepad = $global.navigator.getGamepads()[0];
		var el = this.btnMap.iterator();
		while(el.hasNext()) {
			var el1 = el.next();
			el1.classList.remove("pressed");
		}
		if(this.previousButtonID != null && !gamepad.buttons[this.previousButtonID].pressed) {
			this.previousButtonID = null;
		}
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var currentButton = gamepad.buttons[i];
			if(currentButton.pressed) {
				var el = this.btnMap.h[i];
				el.classList.add("pressed");
				var _gamePadObject = this.map.h[0];
				var temp = _gamePadObject.buttonMap.h[i];
				this.btnNameField.innerText = temp;
				switch(i) {
				case CCGamepad.BUTTON_SELECT:
					var _func = this._options.onSelect;
					var _arr = this._options.onSelectParams != null ? this._options.onSelectParams : [currentButton];
					_func.apply(_func,_arr);
					break;
				case CCGamepad.BUTTON_START:
					var _func1 = this._options.onStart;
					var _arr1 = this._options.onStartParams != null ? this._options.onStartParams : [currentButton];
					if(this._options.onStartOnce == true && this.previousButtonID != i) {
						_func1.apply(_func1,_arr1);
					}
					if(this._options.onStartOnce == false) {
						_func1.apply(_func1,_arr1);
					}
					break;
				default:
					console.log("src/CCGamepad.hx:280:","case '" + i + "': trace ('" + i + "');");
					var _func2 = this._options.onUpdate;
					var _arr2 = this._options.onUpdateParams != null ? this._options.onUpdateParams : [currentButton];
					_func2.apply(_func2,_arr2);
				}
				this.previousButtonID = i;
			}
		}
		var axes = window.document.getElementsByClassName("axis");
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var a = axes[i];
			a.innerHTML = i + ": " + gamepad.axes[i];
			a.setAttribute("value",Std.string(gamepad.axes[i] + 1));
			var joystickX = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 2],0.25);
			var joystickY = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 1],0.25);
			if(joystickX == 1) {
				this.btnNameField.innerText = "→";
			}
			if(joystickX == -1) {
				this.btnNameField.innerText = "←";
			}
			if(joystickY == 1) {
				this.btnNameField.innerText = "↓";
			}
			if(joystickY == -1) {
				this.btnNameField.innerText = "↑";
			}
			if(joystickX == 1 && joystickY == 1) {
				this.btnNameField.innerText = "↘";
			}
			if(joystickX == 1 && joystickY == -1) {
				this.btnNameField.innerText = "↗";
			}
			if(joystickX == -1 && joystickY == 1) {
				this.btnNameField.innerText = "↙";
			}
			if(joystickX == -1 && joystickY == -1) {
				this.btnNameField.innerText = "↖";
			}
		}
		this.start = window.requestAnimationFrame($bind(this,this.gameLoop));
	}
	,applyDeadzone: function(number,threshold) {
		var percentage = (Math.abs(number) - threshold) / (1 - threshold);
		if(percentage < 0) {
			percentage = 0;
		}
		return percentage * (number > 0 ? 1 : -1);
	}
};
var Main = function() {
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + model_constants_App.NAME + " Setup :: build: " + "2020-09-17 10:40:01");
		_gthis.init();
	});
};
Main.__name__ = true;
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	init: function() {
		var gamePad = new SNES();
		gamePad.setup();
		gamePad.onSelect($bind(this,this.onSelectHandler));
		gamePad.onStartOnce($bind(this,this.onStartHandler));
		gamePad.onUpdate($bind(this,this.onUpdateHandler));
	}
	,onSelectHandler: function(e) {
		$global.console.log("onSelectHandler: ",e);
	}
	,onStartHandler: function(e) {
		$global.console.log("onStartHandler: ",e);
	}
	,onUpdateHandler: function(e) {
		$global.console.log("onUpdateHandler: ",e);
	}
};
Math.__name__ = true;
var SNES = function() {
	$global.console.log("" + model_constants_App.NAME + " SNES :: build: " + "2020-09-17 10:40:01");
	CCGamepad.call(this);
};
SNES.__name__ = true;
SNES.__super__ = CCGamepad;
SNES.prototype = $extend(CCGamepad.prototype,{
});
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var model_constants_App = function() { };
model_constants_App.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
CCGamepad.BUTTON_X = 0;
CCGamepad.BUTTON_A = 1;
CCGamepad.BUTTON_B = 2;
CCGamepad.BUTTON_Y = 3;
CCGamepad.BUTTON_LEFT_BOTTOM = 4;
CCGamepad.BUTTON_RIGHT_BOTTOM = 5;
CCGamepad.BUTTON_SELECT = 8;
CCGamepad.BUTTON_START = 9;
SNES.BUTTON_X = 0;
SNES.BUTTON_A = 1;
SNES.BUTTON_B = 2;
SNES.BUTTON_Y = 3;
SNES.BUTTON_LEFT_BOTTOM = 4;
SNES.BUTTON_RIGHT_BOTTOM = 5;
SNES.BUTTON_SELECT = 8;
SNES.BUTTON_START = 9;
model_constants_App.NAME = "[cc-gamepad]";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_gamepad.js.map